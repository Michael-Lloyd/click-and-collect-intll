This page is in Almost Standards Mode. Page layout may be impacted. For Standards Mode use “<!DOCTYPE html>”. localhost:3000
Loading failed for the <script> with source “https://www.googletagmanager.com/gtag/js?id=G-6M0JK9PWN1”. localhost:3000:51:109
=== addCutOnClick DEBUG === interaction.js:37:13
$element: 
Object { 0: span.first-point, length: 1 }
interaction.js:38:13
isFirst: true interaction.js:39:13
=== addCutOnClick setup COMPLETE === interaction.js:92:13
=== Setting up ILL first-point interaction === sequent-core.js:134:21
$firstPoint: 
Object { 0: span.first-point, length: 1 }
sequent-core.js:135:21
Setting up updateFirstPointVisibility sequent-core.js:173:21
Calling updateFirstPointVisibility sequent-core.js:175:25
=== ILL first-point interaction setup COMPLETE === sequent-core.js:193:21
=== setupCommaInteraction DEBUG === ill-mode.js:445:17
$commaSpan: 
Object { 0: span.comma, length: 1, prevObject: {…} }
ill-mode.js:446:17
$li: 
Object { 0: li, length: 1 }
ill-mode.js:447:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:448:17
$formulaList: 
Object { 0: ul.commaList.hyp, length: 1, prevObject: {…} }
ill-mode.js:454:17
isLeftSide: true ill-mode.js:455:17
formulaList classes: commaList hyp ui-sortable ill-mode.js:456:17
$sequentTable: 
Object { length: 0, prevObject: {…} }
ill-mode.js:465:17
No sequent table found, will wait for later refresh ill-mode.js:472:21
=== setupCommaInteraction COMPLETE === ill-mode.js:532:17
=== addCutOnClick DEBUG === interaction.js:37:13
$element: 
Object { 0: span.comma, length: 1 }
interaction.js:38:13
isFirst: false interaction.js:39:13
=== addCutOnClick setup COMPLETE === interaction.js:92:13
=== setupCommaInteraction DEBUG === ill-mode.js:445:17
$commaSpan: 
Object { 0: span.comma, length: 1, prevObject: {…} }
ill-mode.js:446:17
$li: 
Object { 0: li, length: 1 }
ill-mode.js:447:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:448:17
$formulaList: 
Object { 0: ul.commaList.hyp, length: 1, prevObject: {…} }
ill-mode.js:454:17
isLeftSide: true ill-mode.js:455:17
formulaList classes: commaList hyp ui-sortable ill-mode.js:456:17
$sequentTable: 
Object { length: 0, prevObject: {…} }
ill-mode.js:465:17
No sequent table found, will wait for later refresh ill-mode.js:472:21
=== setupCommaInteraction COMPLETE === ill-mode.js:532:17
=== addCutOnClick DEBUG === interaction.js:37:13
$element: 
Object { 0: span.comma, length: 1 }
interaction.js:38:13
isFirst: false interaction.js:39:13
=== addCutOnClick setup COMPLETE === interaction.js:92:13
=== setupCommaInteraction DEBUG === ill-mode.js:445:17
$commaSpan: 
Object { 0: span.comma, length: 1, prevObject: {…} }
ill-mode.js:446:17
$li: 
Object { 0: li, length: 1 }
ill-mode.js:447:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:448:17
$formulaList: 
Object { 0: ul.commaList.cons, length: 1, prevObject: {…} }
ill-mode.js:454:17
isLeftSide: false ill-mode.js:455:17
formulaList classes: commaList cons ui-sortable ill-mode.js:456:17
EARLY RETURN: Not left side, comma selection only applies to context formulas ill-mode.js:459:21
=== updateCommaVisibility DEBUG === ill-mode.js:541:17
$commaSpan: 
Object { 0: span.comma, length: 1 }
ill-mode.js:542:17
$sequentTable: 
Object { 0: table, length: 1 }
ill-mode.js:543:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:544:17
=== updateCommaVisibility DEBUG === ill-mode.js:541:17
$commaSpan: 
Object { 0: span.comma, length: 1 }
ill-mode.js:542:17
$sequentTable: 
Object { 0: table, length: 1 }
ill-mode.js:543:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:544:17
=== toggleCutMode DEBUG === compatibility.js:549:13
$container: 
Object { 0: div#main-proof-container.proof-container, length: 1 }
compatibility.js:550:13
cutMode: false compatibility.js:551:13
$mainDiv: 
Object { 0: div.proof.intuitionistic-mode, length: 1, prevObject: {…} }
compatibility.js:554:13
DISABLING cut mode - removing cut-mode class compatibility.js:560:17
Final $mainDiv classes: proof intuitionistic-mode compatibility.js:564:13
ruleEngine: 
Object { ruleSymbols: {…}, modeName: "intuitionistic" }
compatibility.js:568:13
ruleEngine mode: intuitionistic compatibility.js:569:13
Calling refreshILLTensorDotVisibility after cut mode toggle compatibility.js:572:17
=== refreshILLTensorDotVisibility DEBUG === compatibility.js:586:13
$container: 
Object { 0: div#main-proof-container.proof-container, length: 1 }
compatibility.js:587:13
ruleEngine: 
Object { ruleSymbols: {…}, modeName: "intuitionistic" }
compatibility.js:590:13
ruleEngine mode: intuitionistic compatibility.js:591:13
$proofDiv: 
Object { 0: div.proof.intuitionistic-mode, length: 1, prevObject: {…} }
compatibility.js:600:13
isCutModeEnabled: false compatibility.js:601:13
=== Processing table 1 === compatibility.js:608:17
$sequentTable: 
Object { 0: table, length: 1 }
compatibility.js:609:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
compatibility.js:613:17
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
tensorApplicable: true compatibility.js:616:17
hasMultipleFormulas: true compatibility.js:619:17
sequent.hyp length: 2 compatibility.js:620:17
shouldShowDots: true compatibility.js:623:17
Processing first-point 1: 
Object { 0: span.first-point, length: 1 }
compatibility.js:631:21
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.first-point, length: 1 }
compatibility.js:711:13
$element classes: first-point compatibility.js:712:13
$element HTML before: <empty string> compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: FIRST-POINT compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
Storing original content: <empty string> compatibility.js:736:21
Adding tensor-applicable class compatibility.js:746:21
Setting content to dot compatibility.js:752:17
Final element classes: first-point tensor-applicable compatibility.js:771:13
Final element content: . compatibility.js:772:13
=== updateDotVisibility COMPLETE === compatibility.js:773:13
Total first-points processed: 1 compatibility.js:634:17
$contextFormulas found: 2 compatibility.js:638:17
$lastFormula: 
Object { 0: li, length: 1, prevObject: {…} }
compatibility.js:642:21
$lastFormula HTML: <span class="main-formula hoverable clickable">B</span><span class="comma"></span> compatibility.js:643:21
$lastComma found: 1 compatibility.js:646:21
$lastComma element: 
Object { 0: span.comma, length: 1, prevObject: {…} }
compatibility.js:647:21
$lastComma HTML before updateDotVisibility: <empty string> compatibility.js:648:21
About to call updateDotVisibility for last comma compatibility.js:651:25
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.comma, length: 1, prevObject: {…} }
compatibility.js:711:13
$element classes: comma compatibility.js:712:13
$element HTML before: <empty string> compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: COMMA compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
SKIPPING: Comma elements are handled by ill-mode.js only compatibility.js:723:21
$lastComma HTML after updateDotVisibility: <empty string> compatibility.js:653:25
Processing comma 1 (index 0): 
Object { 0: span.comma, length: 1 }
compatibility.js:665:21
isLastFormula: false compatibility.js:666:21
Comma HTML before processing: <empty string> compatibility.js:668:21
Comma classes before processing: comma compatibility.js:669:21
hasApplicableClass: false compatibility.js:673:21
Resetting non-applicable non-last comma classes only compatibility.js:678:25
Comma HTML after processing: <empty string> compatibility.js:694:21
Comma classes after processing: comma compatibility.js:695:21
Processing comma 2 (index 1): 
Object { 0: span.comma, length: 1 }
compatibility.js:665:21
isLastFormula: true compatibility.js:666:21
Comma HTML before processing: <empty string> compatibility.js:668:21
Comma classes before processing: comma compatibility.js:669:21
hasApplicableClass: false compatibility.js:673:21
Skipping last comma (handled above) compatibility.js:691:25
Comma HTML after processing: <empty string> compatibility.js:694:21
Comma classes after processing: comma compatibility.js:695:21
Total commas processed: 2 compatibility.js:697:17
Total tables processed: 1 compatibility.js:699:13
=== refreshILLTensorDotVisibility COMPLETE === compatibility.js:700:13
=== toggleCutMode COMPLETE === compatibility.js:578:13
=== addCutOnClick DEBUG === interaction.js:37:13
$element: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
interaction.js:38:13
isFirst: true interaction.js:39:13
=== addCutOnClick setup COMPLETE === interaction.js:92:13
=== Setting up ILL first-point interaction === sequent-core.js:134:21
$firstPoint: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
sequent-core.js:135:21
Setting up updateFirstPointVisibility sequent-core.js:173:21
Calling updateFirstPointVisibility sequent-core.js:175:25
=== ILL first-point interaction setup COMPLETE === sequent-core.js:193:21
=== setupCommaInteraction DEBUG === ill-mode.js:445:17
$commaSpan: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
ill-mode.js:446:17
$li: 
Object { 0: li, length: 1 }
ill-mode.js:447:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:448:17
$formulaList: 
Object { 0: ul.commaList.hyp.ui-sortable, length: 1, prevObject: {…} }
ill-mode.js:454:17
isLeftSide: true ill-mode.js:455:17
formulaList classes: commaList hyp ui-sortable ill-mode.js:456:17
$sequentTable: 
Object { length: 0, prevObject: {…} }
ill-mode.js:465:17
No sequent table found, will wait for later refresh ill-mode.js:472:21
=== setupCommaInteraction COMPLETE === ill-mode.js:532:17
=== addCutOnClick DEBUG === interaction.js:37:13
$element: 
Object { 0: span.comma.tensor-applicable, length: 1 }
interaction.js:38:13
isFirst: false interaction.js:39:13
=== addCutOnClick setup COMPLETE === interaction.js:92:13
=== setupCommaInteraction DEBUG === ill-mode.js:445:17
$commaSpan: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
ill-mode.js:446:17
$li: 
Object { 0: li, length: 1 }
ill-mode.js:447:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:448:17
$formulaList: 
Object { 0: ul.commaList.hyp.ui-sortable, length: 1, prevObject: {…} }
ill-mode.js:454:17
isLeftSide: true ill-mode.js:455:17
formulaList classes: commaList hyp ui-sortable ill-mode.js:456:17
$sequentTable: 
Object { length: 0, prevObject: {…} }
ill-mode.js:465:17
No sequent table found, will wait for later refresh ill-mode.js:472:21
=== setupCommaInteraction COMPLETE === ill-mode.js:532:17
=== addCutOnClick DEBUG === interaction.js:37:13
$element: 
Object { 0: span.comma.tensor-applicable, length: 1 }
interaction.js:38:13
isFirst: false interaction.js:39:13
=== addCutOnClick setup COMPLETE === interaction.js:92:13
=== setupCommaInteraction DEBUG === ill-mode.js:445:17
$commaSpan: 
Object { 0: span.comma, length: 1, prevObject: {…} }
ill-mode.js:446:17
$li: 
Object { 0: li, length: 1 }
ill-mode.js:447:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:448:17
$formulaList: 
Object { 0: ul.commaList.cons.ui-sortable, length: 1, prevObject: {…} }
ill-mode.js:454:17
isLeftSide: false ill-mode.js:455:17
formulaList classes: commaList cons ui-sortable ill-mode.js:456:17
EARLY RETURN: Not left side, comma selection only applies to context formulas ill-mode.js:459:21
=== updateCommaVisibility DEBUG === ill-mode.js:541:17
$commaSpan: 
Object { 0: span.comma.tensor-applicable, length: 1 }
ill-mode.js:542:17
$sequentTable: 
Object { 0: table, length: 1 }
ill-mode.js:543:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:544:17
=== updateCommaVisibility DEBUG === ill-mode.js:541:17
$commaSpan: 
Object { 0: span.comma.tensor-applicable, length: 1 }
ill-mode.js:542:17
$sequentTable: 
Object { 0: table, length: 1 }
ill-mode.js:543:17
options: 
Object { withInteraction: true, exportButtons: true, checkProvability: true, autoReverse: {…}, intuitionisticMode: {…}, cutMode: {…}, proofTransformation: {…}, notations: {…} }
ill-mode.js:544:17
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: undefined ill-mode.js:705:17
EARLY RETURN: Invalid sequent structure ill-mode.js:708:21
sequent exists: false ill-mode.js:709:21
sequent.cons exists: no sequent ill-mode.js:710:21
sequent.cons.length: no cons ill-mode.js:711:21
=== updateCommaVisibility timeout triggered === ill-mode.js:559:21
sequent data: undefined ill-mode.js:561:21
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: undefined ill-mode.js:705:17
EARLY RETURN: Invalid sequent structure ill-mode.js:708:21
sequent exists: false ill-mode.js:709:21
sequent.cons exists: no sequent ill-mode.js:710:21
sequent.cons.length: no cons ill-mode.js:711:21
isTensorRuleApplicable result: false ill-mode.js:564:21
hasMultipleHyp: undefined ill-mode.js:567:21
sequent.hyp: no sequent ill-mode.js:568:21
canSplit final result: false ill-mode.js:571:21
Recalculated isLastComma: false currentIndex: 0 totalLi: 2 ill-mode.js:578:21
REMOVING tensor-applicable class and styling ill-mode.js:630:25
originalContent to restore: undefined ill-mode.js:636:25
Final comma span classes: comma ill-mode.js:644:21
Final comma span content: <empty string> ill-mode.js:645:21
=== updateCommaVisibility timeout COMPLETE === ill-mode.js:646:21
=== updateCommaVisibility timeout triggered === ill-mode.js:559:21
sequent data: undefined ill-mode.js:561:21
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: undefined ill-mode.js:705:17
EARLY RETURN: Invalid sequent structure ill-mode.js:708:21
sequent exists: false ill-mode.js:709:21
sequent.cons exists: no sequent ill-mode.js:710:21
sequent.cons.length: no cons ill-mode.js:711:21
isTensorRuleApplicable result: false ill-mode.js:564:21
hasMultipleHyp: undefined ill-mode.js:567:21
sequent.hyp: no sequent ill-mode.js:568:21
canSplit final result: false ill-mode.js:571:21
Recalculated isLastComma: true currentIndex: 1 totalLi: 2 ill-mode.js:578:21
REMOVING tensor-applicable class and styling ill-mode.js:630:25
originalContent to restore: undefined ill-mode.js:636:25
Final comma span classes: comma ill-mode.js:644:21
Final comma span content: <empty string> ill-mode.js:645:21
=== updateCommaVisibility timeout COMPLETE === ill-mode.js:646:21
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: undefined ill-mode.js:705:17
EARLY RETURN: Invalid sequent structure ill-mode.js:708:21
sequent exists: false ill-mode.js:709:21
sequent.cons exists: no sequent ill-mode.js:710:21
sequent.cons.length: no cons ill-mode.js:711:21
=== updateCommaVisibility timeout triggered === ill-mode.js:559:21
sequent data: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:561:21
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
isTensorRuleApplicable result: true ill-mode.js:564:21
hasMultipleHyp: true ill-mode.js:567:21
sequent.hyp: 
Array [ {…}, {…} ]
ill-mode.js:568:21
canSplit final result: true ill-mode.js:571:21
Recalculated isLastComma: false currentIndex: 0 totalLi: 2 ill-mode.js:578:21
ADDING tensor-applicable class and styling ill-mode.js:588:25
NON-LAST COMMA - currentContent: <empty string> storedContent: undefined ill-mode.js:614:29
NON-LAST comma content is correct (not a dot) ill-mode.js:626:33
Final comma span classes: comma tensor-applicable ill-mode.js:644:21
Final comma span content: <empty string> ill-mode.js:645:21
=== updateCommaVisibility timeout COMPLETE === ill-mode.js:646:21
=== updateCommaVisibility timeout triggered === ill-mode.js:559:21
sequent data: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:561:21
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
isTensorRuleApplicable result: true ill-mode.js:564:21
hasMultipleHyp: true ill-mode.js:567:21
sequent.hyp: 
Array [ {…}, {…} ]
ill-mode.js:568:21
canSplit final result: true ill-mode.js:571:21
Recalculated isLastComma: true currentIndex: 1 totalLi: 2 ill-mode.js:578:21
ADDING tensor-applicable class and styling ill-mode.js:588:25
LAST COMMA - currentContent before processing: "" ill-mode.js:595:29
Storing original content for last comma: "" ill-mode.js:599:33
Replacing content with dot ill-mode.js:605:33
Final comma span classes: comma tensor-applicable ill-mode.js:644:21
Final comma span content: . ill-mode.js:645:21
=== updateCommaVisibility timeout COMPLETE === ill-mode.js:646:21
Timeout for refreshILLTensorDotVisibility - $container: 
Object { length: 0, prevObject: {…} }
sequent-core.js:184:25
No container found for refreshILLTensorDotVisibility sequent-core.js:189:29
Timeout triggered - $container: 
Object { length: 0, prevObject: {…} }
ill-mode.js:478:21
No container found for refreshILLTensorDotVisibility ill-mode.js:483:25
Timeout triggered - $container: 
Object { length: 0, prevObject: {…} }
ill-mode.js:478:21
No container found for refreshILLTensorDotVisibility ill-mode.js:483:25
Timeout for refreshILLTensorDotVisibility - $container: 
Object { 0: div#main-proof-container.proof-container, length: 1, prevObject: {…} }
sequent-core.js:184:25
Calling refreshILLTensorDotVisibility from sequent-core timeout sequent-core.js:186:29
=== refreshILLTensorDotVisibility DEBUG === compatibility.js:586:13
$container: 
Object { 0: div#main-proof-container.proof-container, length: 1, prevObject: {…} }
compatibility.js:587:13
ruleEngine: 
Object { ruleSymbols: {…}, modeName: "intuitionistic" }
compatibility.js:590:13
ruleEngine mode: intuitionistic compatibility.js:591:13
$proofDiv: 
Object { 0: div.proof.intuitionistic-mode, length: 1, prevObject: {…} }
compatibility.js:600:13
isCutModeEnabled: false compatibility.js:601:13
=== Processing table 1 === compatibility.js:608:17
$sequentTable: 
Object { 0: table, length: 1 }
compatibility.js:609:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
compatibility.js:613:17
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
tensorApplicable: true compatibility.js:616:17
hasMultipleFormulas: true compatibility.js:619:17
sequent.hyp length: 2 compatibility.js:620:17
shouldShowDots: true compatibility.js:623:17
Processing first-point 1: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
compatibility.js:631:21
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
compatibility.js:711:13
$element classes: first-point compatibility.js:712:13
$element HTML before: <empty string> compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: FIRST-POINT compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
Storing original content: <empty string> compatibility.js:736:21
Adding tensor-applicable class compatibility.js:746:21
Setting content to dot compatibility.js:752:17
Final element classes: first-point tensor-applicable compatibility.js:771:13
Final element content: . compatibility.js:772:13
=== updateDotVisibility COMPLETE === compatibility.js:773:13
Total first-points processed: 1 compatibility.js:634:17
$contextFormulas found: 2 compatibility.js:638:17
$lastFormula: 
Object { 0: li, length: 1, prevObject: {…} }
compatibility.js:642:21
$lastFormula HTML: <span class="main-formula hoverable clickable">B</span><span class="comma tensor-applicable" title="Click to select context split for tensor rule">.</span> compatibility.js:643:21
$lastComma found: 1 compatibility.js:646:21
$lastComma element: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
compatibility.js:647:21
$lastComma HTML before updateDotVisibility: . compatibility.js:648:21
About to call updateDotVisibility for last comma compatibility.js:651:25
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
compatibility.js:711:13
$element classes: comma tensor-applicable compatibility.js:712:13
$element HTML before: . compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: COMMA compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
SKIPPING: Comma elements are handled by ill-mode.js only compatibility.js:723:21
$lastComma HTML after updateDotVisibility: . compatibility.js:653:25
Processing comma 1 (index 0): 
Object { 0: span.comma.tensor-applicable, length: 1 }
compatibility.js:665:21
isLastFormula: false compatibility.js:666:21
Comma HTML before processing: <empty string> compatibility.js:668:21
Comma classes before processing: comma tensor-applicable compatibility.js:669:21
hasApplicableClass: true compatibility.js:673:21
CLEANING non-last comma - removing any dot content compatibility.js:684:25
Comma HTML after processing: <empty string> compatibility.js:694:21
Comma classes after processing: comma tensor-applicable compatibility.js:695:21
Processing comma 2 (index 1): 
Object { 0: span.comma.tensor-applicable, length: 1 }
compatibility.js:665:21
isLastFormula: true compatibility.js:666:21
Comma HTML before processing: . compatibility.js:668:21
Comma classes before processing: comma tensor-applicable compatibility.js:669:21
hasApplicableClass: true compatibility.js:673:21
Skipping last comma (handled above) compatibility.js:691:25
Comma HTML after processing: . compatibility.js:694:21
Comma classes after processing: comma tensor-applicable compatibility.js:695:21
Total commas processed: 2 compatibility.js:697:17
Total tables processed: 1 compatibility.js:699:13
=== refreshILLTensorDotVisibility COMPLETE === compatibility.js:700:13
Timeout triggered - $container: 
Object { 0: div#main-proof-container.proof-container, length: 1, prevObject: {…} }
ill-mode.js:478:21
Calling refreshILLTensorDotVisibility ill-mode.js:480:25
=== refreshILLTensorDotVisibility DEBUG === compatibility.js:586:13
$container: 
Object { 0: div#main-proof-container.proof-container, length: 1, prevObject: {…} }
compatibility.js:587:13
ruleEngine: 
Object { ruleSymbols: {…}, modeName: "intuitionistic" }
compatibility.js:590:13
ruleEngine mode: intuitionistic compatibility.js:591:13
$proofDiv: 
Object { 0: div.proof.intuitionistic-mode, length: 1, prevObject: {…} }
compatibility.js:600:13
isCutModeEnabled: false compatibility.js:601:13
=== Processing table 1 === compatibility.js:608:17
$sequentTable: 
Object { 0: table, length: 1 }
compatibility.js:609:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
compatibility.js:613:17
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
tensorApplicable: true compatibility.js:616:17
hasMultipleFormulas: true compatibility.js:619:17
sequent.hyp length: 2 compatibility.js:620:17
shouldShowDots: true compatibility.js:623:17
Processing first-point 1: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
compatibility.js:631:21
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
compatibility.js:711:13
$element classes: first-point tensor-applicable compatibility.js:712:13
$element HTML before: . compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: FIRST-POINT compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
Adding tensor-applicable class compatibility.js:746:21
Setting content to dot compatibility.js:752:17
Final element classes: first-point tensor-applicable compatibility.js:771:13
Final element content: . compatibility.js:772:13
=== updateDotVisibility COMPLETE === compatibility.js:773:13
Total first-points processed: 1 compatibility.js:634:17
$contextFormulas found: 2 compatibility.js:638:17
$lastFormula: 
Object { 0: li, length: 1, prevObject: {…} }
compatibility.js:642:21
$lastFormula HTML: <span class="main-formula hoverable clickable">B</span><span class="comma tensor-applicable" title="Click to select context split for tensor rule">.</span> compatibility.js:643:21
$lastComma found: 1 compatibility.js:646:21
$lastComma element: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
compatibility.js:647:21
$lastComma HTML before updateDotVisibility: . compatibility.js:648:21
About to call updateDotVisibility for last comma compatibility.js:651:25
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
compatibility.js:711:13
$element classes: comma tensor-applicable compatibility.js:712:13
$element HTML before: . compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: COMMA compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
SKIPPING: Comma elements are handled by ill-mode.js only compatibility.js:723:21
$lastComma HTML after updateDotVisibility: . compatibility.js:653:25
Processing comma 1 (index 0): 
Object { 0: span.comma.tensor-applicable, length: 1 }
compatibility.js:665:21
isLastFormula: false compatibility.js:666:21
Comma HTML before processing: <empty string> compatibility.js:668:21
Comma classes before processing: comma tensor-applicable compatibility.js:669:21
hasApplicableClass: true compatibility.js:673:21
CLEANING non-last comma - removing any dot content compatibility.js:684:25
Comma HTML after processing: <empty string> compatibility.js:694:21
Comma classes after processing: comma tensor-applicable compatibility.js:695:21
Processing comma 2 (index 1): 
Object { 0: span.comma.tensor-applicable, length: 1 }
compatibility.js:665:21
isLastFormula: true compatibility.js:666:21
Comma HTML before processing: . compatibility.js:668:21
Comma classes before processing: comma tensor-applicable compatibility.js:669:21
hasApplicableClass: true compatibility.js:673:21
Skipping last comma (handled above) compatibility.js:691:25
Comma HTML after processing: . compatibility.js:694:21
Comma classes after processing: comma tensor-applicable compatibility.js:695:21
Total commas processed: 2 compatibility.js:697:17
Total tables processed: 1 compatibility.js:699:13
=== refreshILLTensorDotVisibility COMPLETE === compatibility.js:700:13
Timeout triggered - $container: 
Object { 0: div#main-proof-container.proof-container, length: 1, prevObject: {…} }
ill-mode.js:478:21
Calling refreshILLTensorDotVisibility ill-mode.js:480:25
=== refreshILLTensorDotVisibility DEBUG === compatibility.js:586:13
$container: 
Object { 0: div#main-proof-container.proof-container, length: 1, prevObject: {…} }
compatibility.js:587:13
ruleEngine: 
Object { ruleSymbols: {…}, modeName: "intuitionistic" }
compatibility.js:590:13
ruleEngine mode: intuitionistic compatibility.js:591:13
$proofDiv: 
Object { 0: div.proof.intuitionistic-mode, length: 1, prevObject: {…} }
compatibility.js:600:13
isCutModeEnabled: false compatibility.js:601:13
=== Processing table 1 === compatibility.js:608:17
$sequentTable: 
Object { 0: table, length: 1 }
compatibility.js:609:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
compatibility.js:613:17
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
tensorApplicable: true compatibility.js:616:17
hasMultipleFormulas: true compatibility.js:619:17
sequent.hyp length: 2 compatibility.js:620:17
shouldShowDots: true compatibility.js:623:17
Processing first-point 1: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
compatibility.js:631:21
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
compatibility.js:711:13
$element classes: first-point tensor-applicable compatibility.js:712:13
$element HTML before: . compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: FIRST-POINT compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
Adding tensor-applicable class compatibility.js:746:21
Setting content to dot compatibility.js:752:17
Final element classes: first-point tensor-applicable compatibility.js:771:13
Final element content: . compatibility.js:772:13
=== updateDotVisibility COMPLETE === compatibility.js:773:13
Total first-points processed: 1 compatibility.js:634:17
$contextFormulas found: 2 compatibility.js:638:17
$lastFormula: 
Object { 0: li, length: 1, prevObject: {…} }
compatibility.js:642:21
$lastFormula HTML: <span class="main-formula hoverable clickable">B</span><span class="comma tensor-applicable" title="Click to select context split for tensor rule">.</span> compatibility.js:643:21
$lastComma found: 1 compatibility.js:646:21
$lastComma element: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
compatibility.js:647:21
$lastComma HTML before updateDotVisibility: . compatibility.js:648:21
About to call updateDotVisibility for last comma compatibility.js:651:25
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
compatibility.js:711:13
$element classes: comma tensor-applicable compatibility.js:712:13
$element HTML before: . compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: COMMA compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
SKIPPING: Comma elements are handled by ill-mode.js only compatibility.js:723:21
$lastComma HTML after updateDotVisibility: . compatibility.js:653:25
Processing comma 1 (index 0): 
Object { 0: span.comma.tensor-applicable, length: 1 }
compatibility.js:665:21
isLastFormula: false compatibility.js:666:21
Comma HTML before processing: <empty string> compatibility.js:668:21
Comma classes before processing: comma tensor-applicable compatibility.js:669:21
hasApplicableClass: true compatibility.js:673:21
CLEANING non-last comma - removing any dot content compatibility.js:684:25
Comma HTML after processing: <empty string> compatibility.js:694:21
Comma classes after processing: comma tensor-applicable compatibility.js:695:21
Processing comma 2 (index 1): 
Object { 0: span.comma.tensor-applicable, length: 1 }
compatibility.js:665:21
isLastFormula: true compatibility.js:666:21
Comma HTML before processing: . compatibility.js:668:21
Comma classes before processing: comma tensor-applicable compatibility.js:669:21
hasApplicableClass: true compatibility.js:673:21
Skipping last comma (handled above) compatibility.js:691:25
Comma HTML after processing: . compatibility.js:694:21
Comma classes after processing: comma tensor-applicable compatibility.js:695:21
Total commas processed: 2 compatibility.js:697:17
Total tables processed: 1 compatibility.js:699:13
=== refreshILLTensorDotVisibility COMPLETE === compatibility.js:700:13
Calling ILL refreshAllCommaVisibility after sortable update sequent-core.js:100:33
Calling ILL refreshAllCommaVisibility after sortable stop sequent-core.js:116:33
=== refreshAllCommaVisibility after rearrangement === ill-mode.js:729:17
REFRESH CLEANUP - comma before: content="." data="" ill-mode.js:752:25
RESETTING comma with dot content to empty string ill-mode.js:759:29
REFRESH CLEANUP - comma before: content="" data="undefined" ill-mode.js:752:25
Found 2 comma spans to update ill-mode.js:781:21
=== updateCommaVisibility DEBUG === ill-mode.js:541:17
$commaSpan: 
Object { 0: span.comma.tensor-applicable, length: 1 }
ill-mode.js:542:17
$sequentTable: 
Object { 0: table, length: 1, prevObject: {…} }
ill-mode.js:543:17
options: 
Object { withInteraction: true }
ill-mode.js:544:17
=== updateCommaVisibility DEBUG === ill-mode.js:541:17
$commaSpan: 
Object { 0: span.comma.tensor-applicable, length: 1 }
ill-mode.js:542:17
$sequentTable: 
Object { 0: table, length: 1, prevObject: {…} }
ill-mode.js:543:17
options: 
Object { withInteraction: true }
ill-mode.js:544:17
=== refreshAllCommaVisibility COMPLETE === ill-mode.js:795:17
=== refreshAllCommaVisibility after rearrangement === ill-mode.js:729:17
EARLY RETURN: Already refreshing commas for this list ill-mode.js:733:21
=== updateCommaVisibility timeout triggered === ill-mode.js:559:21
sequent data: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:561:21
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
isTensorRuleApplicable result: true ill-mode.js:564:21
hasMultipleHyp: true ill-mode.js:567:21
sequent.hyp: 
Array [ {…}, {…} ]
ill-mode.js:568:21
canSplit final result: true ill-mode.js:571:21
Recalculated isLastComma: false currentIndex: 0 totalLi: 2 ill-mode.js:578:21
ADDING tensor-applicable class and styling ill-mode.js:588:25
NON-LAST COMMA - currentContent: <empty string> storedContent: undefined ill-mode.js:614:29
NON-LAST comma content is correct (not a dot) ill-mode.js:626:33
Final comma span classes: comma tensor-applicable ill-mode.js:644:21
Final comma span content: <empty string> ill-mode.js:645:21
=== updateCommaVisibility timeout COMPLETE === ill-mode.js:646:21
=== updateCommaVisibility timeout triggered === ill-mode.js:559:21
sequent data: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:561:21
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
isTensorRuleApplicable result: true ill-mode.js:564:21
hasMultipleHyp: true ill-mode.js:567:21
sequent.hyp: 
Array [ {…}, {…} ]
ill-mode.js:568:21
canSplit final result: true ill-mode.js:571:21
Recalculated isLastComma: true currentIndex: 1 totalLi: 2 ill-mode.js:578:21
ADDING tensor-applicable class and styling ill-mode.js:588:25
LAST COMMA - currentContent before processing: "" ill-mode.js:595:29
Storing original content for last comma: "" ill-mode.js:599:33
Replacing content with dot ill-mode.js:605:33
Final comma span classes: comma tensor-applicable ill-mode.js:644:21
Final comma span content: . ill-mode.js:645:21
=== updateCommaVisibility timeout COMPLETE === ill-mode.js:646:21
=== refreshILLTensorDotVisibility DEBUG === compatibility.js:586:13
$container: 
Object { 0: div#main-proof-container.proof-container, length: 1, prevObject: {…} }
compatibility.js:587:13
ruleEngine: 
Object { ruleSymbols: {…}, modeName: "intuitionistic" }
compatibility.js:590:13
ruleEngine mode: intuitionistic compatibility.js:591:13
$proofDiv: 
Object { 0: div.proof.intuitionistic-mode, length: 1, prevObject: {…} }
compatibility.js:600:13
isCutModeEnabled: false compatibility.js:601:13
=== Processing table 1 === compatibility.js:608:17
$sequentTable: 
Object { 0: table, length: 1 }
compatibility.js:609:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
compatibility.js:613:17
=== isTensorRuleApplicable DEBUG === ill-mode.js:703:17
sequent: 
Object { hyp: (2) […], cons: (1) […] }
ill-mode.js:705:17
goalFormula: 
Object { type: "tensor", value1: {…}, value2: {…} }
ill-mode.js:716:17
goalFormula.type: tensor ill-mode.js:717:17
isTensorRuleApplicable result: true ill-mode.js:720:17
tensorApplicable: true compatibility.js:616:17
hasMultipleFormulas: true compatibility.js:619:17
sequent.hyp length: 2 compatibility.js:620:17
shouldShowDots: true compatibility.js:623:17
Processing first-point 1: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
compatibility.js:631:21
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.first-point.tensor-applicable, length: 1 }
compatibility.js:711:13
$element classes: first-point tensor-applicable compatibility.js:712:13
$element HTML before: . compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: FIRST-POINT compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
SKIPPING: ill-mode.js is currently refreshing comma visibility compatibility.js:730:21
Total first-points processed: 1 compatibility.js:634:17
$contextFormulas found: 2 compatibility.js:638:17
$lastFormula: 
Object { 0: li, length: 1, prevObject: {…} }
compatibility.js:642:21
$lastFormula HTML: <span class="main-formula hoverable clickable">A</span><span class="comma tensor-applicable" title="Click to select context split for tensor rule">.</span> compatibility.js:643:21
$lastComma found: 1 compatibility.js:646:21
$lastComma element: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
compatibility.js:647:21
$lastComma HTML before updateDotVisibility: . compatibility.js:648:21
About to call updateDotVisibility for last comma compatibility.js:651:25
=== updateDotVisibility DEBUG === compatibility.js:710:13
$element: 
Object { 0: span.comma.tensor-applicable, length: 1, prevObject: {…} }
compatibility.js:711:13
$element classes: comma tensor-applicable compatibility.js:712:13
$element HTML before: . compatibility.js:713:13
shouldShowDots: true compatibility.js:714:13
isCutMode: false compatibility.js:715:13
Element type/role: COMMA compatibility.js:716:13
SHOWING DOTS compatibility.js:719:17
SKIPPING: Comma elements are handled by ill-mode.js only compatibility.js:723:21
$lastComma HTML after updateDotVisibility: . compatibility.js:653:25
Processing comma 1 (index 0): 
Object { 0: span.comma.tensor-applicable, length: 1 }
compatibility.js:665:21
isLastFormula: false compatibility.js:666:21
Comma HTML before processing: <empty string> compatibility.js:668:21
Comma classes before processing: comma tensor-applicable compatibility.js:669:21
hasApplicableClass: true compatibility.js:673:21
CLEANING non-last comma - removing any dot content compatibility.js:684:25
Comma HTML after processing: <empty string> compatibility.js:694:21
Comma classes after processing: comma tensor-applicable compatibility.js:695:21
Processing comma 2 (index 1): 
Object { 0: span.comma.tensor-applicable, length: 1 }
compatibility.js:665:21
isLastFormula: true compatibility.js:666:21
Comma HTML before processing: . compatibility.js:668:21
Comma classes before processing: comma tensor-applicable compatibility.js:669:21
hasApplicableClass: true compatibility.js:673:21
Skipping last comma (handled above) compatibility.js:691:25
Comma HTML after processing: . compatibility.js:694:21
Comma classes after processing: comma tensor-applicable compatibility.js:695:21
Total commas processed: 2 compatibility.js:697:17
Total tables processed: 1 compatibility.js:699:13
=== refreshILLTensorDotVisibility COMPLETE === compatibility.js:700:13
